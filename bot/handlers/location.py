"""Location handler for processing user location messages."""

import logging

from telegram import Update
from telegram.ext import ContextTypes

from bot.services.openai_client import openai_client
from bot.services.rate_limiter import rate_limiter

logger = logging.getLogger(__name__)


async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle location messages from users.

    Args:
        update: Telegram update object
        context: Callback context
    """
    if not update.message or not update.message.location:
        return

    user = update.effective_user
    if not user:
        return

    location = update.message.location
    chat_id = update.effective_chat.id
    user_id = user.id

    logger.info(
        f"Received location from user {user_id}: {location.latitude}, {location.longitude}"
    )

    # Check rate limit
    if not await rate_limiter.check_rate_limit(user_id):
        await update.message.reply_text(
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. "
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –≤ 5 —Å–µ–∫—É–Ω–¥."
        )
        return

    # Acquire rate limit slot
    await rate_limiter.acquire(user_id)

    # Send typing action
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")

    # Get fact from OpenAI
    fact = await openai_client.get_location_fact(
        latitude=location.latitude,
        longitude=location.longitude,
        language="ru",  # Default to Russian for MVP
    )

    if fact:
        await update.message.reply_text(f"üìç {fact}")
    else:
        await update.message.reply_text(
            "üòî –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é —Ç–æ—á–∫—É!"
        )


async def handle_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle /start command.

    Args:
        update: Telegram update object
        context: Callback context
    """
    welcome_message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ª—é–±–æ–º –º–µ—Å—Ç–µ.\n\n"
        "üìç –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è –Ω–∞–π–¥—É —á—Ç–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ "
        "–≤ —Ä–∞–¥–∏—É—Å–µ 500 –º–µ—Ç—Ä–æ–≤ –æ—Ç –≤–∞—Å!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìé –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–õ–æ–∫–∞—Ü–∏—è¬ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏."
    )

    if update.message:
        await update.message.reply_text(welcome_message)


async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle /help command.

    Args:
        update: Telegram update object
        context: Callback context
    """
    help_message = (
        "‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìé (—Å–∫—Ä–µ–ø–∫–∞)\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ ¬´–õ–æ–∫–∞—Ü–∏—è¬ª –∏–ª–∏ ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç!\n\n"
        "‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω–µ –±–æ–ª–µ–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ 5 —Å–µ–∫—É–Ω–¥"
    )

    if update.message:
        await update.message.reply_text(help_message)
